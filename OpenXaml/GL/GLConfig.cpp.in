#include "OpenXaml/GL/GLConfig.h"
#include <fstream>
#include <string>
#include <iostream>
#include <glad/glad.h>
using namespace std;
namespace GL
{
	unsigned int xamlShader;
	void LoadShaders()
	{
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glEnable(GL_BLEND);
		glClearColor(0.0, 0.0, 0.0, 0.0);
		string fragment = R"(@FRAGMENT_CODE@)";
		string vertex = R"(@VERTEX_CODE@)";

		const char * vertexsrc = vertex.c_str();
		const char * fragmentsrc = fragment.c_str();
		
		int  success;
		char infoLog[512];

		GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(vertexShader, 1, &vertexsrc, NULL);
		glCompileShader(vertexShader);
		glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);

		if(!success)
		{
    		glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
    		std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
		}

		GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(fragmentShader, 1, &fragmentsrc, NULL);
		glCompileShader(fragmentShader);
		glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);

		if(!success)
		{
    		glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
    		std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
		}

		GLuint shaderProgram = glCreateProgram();
		glAttachShader(shaderProgram, vertexShader);
		glAttachShader(shaderProgram, fragmentShader);
		glBindFragDataLocation(shaderProgram, 0, "outColor");
		glLinkProgram(shaderProgram);

		xamlShader = shaderProgram;
		//return shaderProgram;
	}
}
